name: Build Android APK (Local)

on:
  push:
    branches:
      - main
    paths:
      - 'mobile/**'
  workflow_dispatch:

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        working-directory: mobile
        run: npm ci

      - name: Prebuild Android
        working-directory: mobile
        run: npx expo prebuild --platform android --clean

      - name: Build Android APK
        working-directory: mobile/android
        run: ./gradlew assembleRelease

      - name: Sign APK
        working-directory: mobile/android/app/build/outputs/apk/release
        env:
          KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          if [ -n "$KEYSTORE_BASE64" ] && [ -n "$KEY_ALIAS" ] && [ -n "$KEYSTORE_PASSWORD" ]; then
            echo "Signing APK..."

            # Find the unsigned APK file
            UNSIGNED_APK=$(ls *-release-unsigned.apk 2>/dev/null || ls *-release.apk 2>/dev/null || echo "")

            if [ -z "$UNSIGNED_APK" ]; then
              echo "‚ùå Error: Could not find unsigned APK file"
              echo "Available files:"
              ls -la
              exit 1
            fi

            echo "Found unsigned APK: $UNSIGNED_APK"
            SIGNED_APK="${UNSIGNED_APK%-unsigned.apk}-signed.apk"
            echo "Will create signed APK: $SIGNED_APK"

            # Find the latest build-tools version
            BUILD_TOOLS_VERSION=$(ls $ANDROID_HOME/build-tools | sort -V | tail -n 1)
            echo "Using build-tools version: $BUILD_TOOLS_VERSION"

            # Use keystore password for key password if key password is not set
            if [ -z "$KEY_PASSWORD" ]; then
              echo "Using keystore password for key password (KEY_PASSWORD not set)"
              KEY_PASSWORD="$KEYSTORE_PASSWORD"
            fi

            echo "$KEYSTORE_BASE64" | base64 -d > release.keystore
            $ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION/apksigner sign \
              --ks release.keystore \
              --ks-key-alias "$KEY_ALIAS" \
              --ks-pass pass:"$KEYSTORE_PASSWORD" \
              --key-pass pass:"$KEY_PASSWORD" \
              --out "$SIGNED_APK" \
              "$UNSIGNED_APK"
            rm release.keystore
            echo "‚úÖ APK signed successfully: $SIGNED_APK"
          else
            echo "‚ö†Ô∏è  Missing signing secrets - APK will be unsigned"
            echo ""
            echo "To sign APKs, add ALL of the following secrets to GitHub:"
            echo "  - ANDROID_KEYSTORE_BASE64 $([ -n "$KEYSTORE_BASE64" ] && echo "‚úÖ" || echo "‚ùå MISSING")"
            echo "  - ANDROID_KEY_ALIAS $([ -n "$KEY_ALIAS" ] && echo "‚úÖ" || echo "‚ùå MISSING")"
            echo "  - ANDROID_KEYSTORE_PASSWORD $([ -n "$KEYSTORE_PASSWORD" ] && echo "‚úÖ" || echo "‚ùå MISSING")"
            echo "  - ANDROID_KEY_PASSWORD (optional, will use keystore password if not set)"
            echo ""
            echo "See ANDROID_SIGNING_SETUP.md for instructions"
          fi

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: bookstor-android-${{ github.sha }}
          path: mobile/android/app/build/outputs/apk/release/*.apk
          retention-days: 30

      - name: Get version from app.json
        id: get_version
        working-directory: mobile
        run: |
          VERSION=$(node -p "require('./app.json').expo.extra.version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Draft Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Bookstor ${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: true
          body: |
            ## Bookstor ${{ steps.get_version.outputs.version }}

            ### üì± Android APK
            Download the APK below and install on your Android device.

            ### üîê Security Notes
            - First user automatically becomes admin
            - Registration disabled after first user (can be re-enabled in settings)
            - Strong password requirements enforced

            ### üìù Changelog
            See commit history for detailed changes.

            **Build Information:**
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Built: ${{ github.event.head_commit.timestamp }}
          files: mobile/android/app/build/outputs/apk/release/*.apk
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Tagged Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: mobile/android/app/build/outputs/apk/release/*.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

